#ifndef CHIP8_HPP
#define CHIP8_HPP

#include <SFML/Graphics/RenderWindow.hpp>
#include <memory>
#include "components.hpp"

struct Chip8 {
    bool drawFlag;
    unsigned short pc;
    unsigned short opcode; // current opcode (opcodes are 2 bytes)
    unsigned short I;
    unsigned short sp;
    unsigned char V[16]; // 16 * 1 byte registers (VF is carry flag)

    std::unique_ptr<Memory> memory;
    unsigned char fontset [80] { 
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    unsigned char sound_timer;
    unsigned char delay_timer;
    unsigned short stack[16];
    unsigned char key[16];

    std::unique_ptr<Screen> screen;
    Chip8();
    void initialize();
    void loadFile(std::string filename);
    void emulateCycle();
    void drawScreen(sf::RenderWindow& window);
};

#endif //CHIP8_HPP
